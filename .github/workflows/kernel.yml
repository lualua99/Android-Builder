name: Build kernels

on:
  push:
    paths:
      - ".github/workflows/kernel.yml"
  workflow_dispatch:
  schedule:
    - cron: "14 13 * * 5"

jobs:
  Read-configuration:
    name: 🐂 Parse *.config.json
    runs-on: ubuntu-latest
    outputs:
      CONFIGS: ${{ steps.generate-matrix.outputs.CONFIGS }}
      BUILD_DATE: ${{ steps.generate-builddate.outputs.BUILDDATE }}
    steps:
      - name: 😄 Checkout
        uses: actions/checkout@v4

      - name: 😆 Generate Matrix
        id: generate-matrix
        run: |
          echo "CONFIGS<<EOF" >> $GITHUB_OUTPUT
          jq -s 'add' Kernel/configs/*.config.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ⏰ Set builddate
        id: generate-builddate
        run: echo "BUILDDATE=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "🐎 Build kernel"
    runs-on: ubuntu-latest
    needs: Read-configuration
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        CONFIG: ${{ fromJSON(needs.Read-configuration.outputs.CONFIGS) }}
    env:
      WORKSPACE: ${{ github.workspace }}
      BUILD_DATE: "${{ needs.Read-configuration.outputs.BUILD_DATE }}"
      KERNEL_NAME: ${{ matrix.CONFIG.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.CONFIG.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.CONFIG.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.CONFIG.kernelSource.device }}
      KERNEL_DEFCONFIG_PATH: ${{ matrix.CONFIG.kernelSource.defconfig }}
      ENABLE_CCACHE: ${{ matrix.CONFIG.enableCcache }}
      USE_ANYKERNEL3: ${{ matrix.CONFIG.AnyKernel3.use }}
      CONFIRM_RELEASE: ${{ matrix.CONFIG.AnyKernel3.release }}
      ENABLE_KERNELSU: ${{ matrix.CONFIG.enableKernelSU }}
      ENABLE_LXC: ${{ matrix.CONFIG.enableLXC }}
      OUT_DIR: "${{ github.workspace }}/out"
      CCACHE_DIR: "${{ github.workspace }}/ccache"
    steps:
      - name: 📐 Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: 😄 Checkout
        uses: actions/checkout@v4

      - name: ⭐ Install prerequisites
        run: |
          sudo apt-get update
          # 基础依赖
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python3
          sudo apt-get install -y pngcrush schedtool dpkg-dev liblz4-tool make optipng maven device-tree-compiler 
          # 修复32位依赖包名
          sudo apt-get install -y libc6-dev-i386 lib32ncurses-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc
          # 其他编译依赖
          sudo apt-get install -y libxml2-utils libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools lzop flex tree
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl 
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar llvm g++-multilib bison gperf zlib1g-dev automake

          # 安装Python 2（使用Ubuntu 20.04源）
          echo "deb http://archive.ubuntu.com/ubuntu focal main universe" | sudo tee /etc/apt/sources.list.d/focal.list
          sudo apt-get update
          sudo apt-get install -y -t focal python2 python2-dev
          python2 --version  # 验证安装

          # 清理临时源
          sudo rm /etc/apt/sources.list.d/focal.list
          sudo apt-get update

      - name: 🚄 Setup ccache
        if: ${{ env.ENABLE_CCACHE == 'true' }}
        id: hash
        run: |
          mkdir -p ${{ env.OUT_DIR }}
          ccache -o compression=false -o cache_dir=${{ env.CCACHE_DIR }}
          echo "HASH=$(echo -n '${{ toJSON(matrix.CONFIG) }}' | openssl dgst -sha1 | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: 🚅 Cache ccache & output
        env:
          HASH: ${{ steps.hash.outputs.HASH }}
        if: ${{ env.ENABLE_CCACHE == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.OUT_DIR }}
            ${{ env.CCACHE_DIR }}
          key: cache-${{ env.KERNEL_NAME }}-${{env.HASH}}-${{ env.BUILD_DATE }}
          restore-keys: |
            cache-${{ env.KERNEL_NAME }}-${{env.HASH}}-
            cache-${{ env.KERNEL_NAME }}-

      - name: 🌟 Clone kernel source (with auth)
        run: |
          # 使用Secrets中的令牌进行私有仓库认证
          AUTH_REPO_URL="https://${{ secrets.KERNEL_GIT_TOKEN }}@github.com/lualua99/kernel-msm-4.19.git"
          
          # 克隆仓库（递归克隆子模块，浅克隆加速）
          git clone \
            --recursive \
            --depth=1 \
            -j $(nproc) \
            --branch ${{ env.KERNEL_BRANCH }} \
            "$AUTH_REPO_URL" \
            ${{ env.KERNEL_NAME }}

      - name: 💫 Get toolchains
        env:
          toolchains: "${{ toJSON(matrix.CONFIG.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "🤔 Found $toolchains_num toolchains to install."

          for ((i=0;i<toolchains_num;i++)); do
            toolchain=$(echo $toolchains | jq -r ".[$i]")
            toolchain_name=$(echo $toolchain | jq -r ".name")
            mkdir -p "$toolchain_name"
            
            if echo $toolchain | jq -e 'has("url")' > /dev/null; then
              # 从URL下载工具链
              toolchain_url=$(echo $toolchain | jq -r ".url")
              wget -q "$toolchain_url" -O toolchain.tar
              
              # 自动识别压缩格式并解压
              filename="${toolchain_url##*/}"
              case "$filename" in
                *.zip) unzip -q toolchain.tar -d "$toolchain_name" ;;
                *.tar) tar xf toolchain.tar -C "$toolchain_name" ;;
                *.tar.gz|*.tgz) tar zxf toolchain.tar -C "$toolchain_name" ;;
                *.tar.xz) tar xf toolchain.tar -C "$toolchain_name" ;;
                *.rar) unrar x -y toolchain.tar "$toolchain_name" ;;
                *) echo "⚠️ Unknown format: $filename" && exit 1 ;;
              esac
              rm toolchain.tar
            else
              # 从Git仓库克隆工具链
              toolchain_repo=$(echo $toolchain | jq -r ".repo")
              toolchain_branch=$(echo $toolchain | jq -r ".branch")
              git clone \
                --recursive \
                --depth=1 \
                -j $(nproc) \
                --branch "$toolchain_branch" \
                "$toolchain_repo" \
                "$toolchain_name"
            fi

            # 添加工具链到PATH
            jq -r ".binaryEnv[]" <<< "$toolchain" | while read -r subPath; do
              echo "${{ env.WORKSPACE }}/$toolchain_name/$subPath" >> $GITHUB_PATH
            done
          done

      - name: 😎 Set build arguments
        id: generate-args
        env:
          PARAMS: "${{ toJSON(matrix.CONFIG.params) }}"
          THREAD: $(nproc --all)
        run: |
          ARCH=$(echo "$PARAMS" | jq -r ".ARCH")
          CC=$(echo "$PARAMS" | jq -r ".CC")

          args="-j${{ env.THREAD }} O=${{ env.OUT_DIR }} ARCH=$ARCH"
          if [ -n "$CC" ]; then
            [["$CC" == *"/"*]] && CC="${{ env.WORKSPACE }}/$CC"
            [ "${{ env.ENABLE_CCACHE }}" = true ] && args="$args CC=\"ccache $CC\"" || args="$args CC=$CC"
          fi

          # 添加额外编译参数
          while read -r cmd; do
            key=$(echo "$cmd" | cut -d= -f1)
            value=$(echo "$cmd" | cut -d= -f2)
            [[ "$value" == *"/"* ]] && value="${{ env.WORKSPACE }}/$value"
            args="$args $key=$value"
          done < <(jq -r '.externalCommands | to_entries[] | "\(.key)=\(.value)"' <<< "$PARAMS")

          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "ARGS=$args" >> $GITHUB_OUTPUT

      - name: 😋 Setup KernelSU (if enabled)
        working-directory: ${{ env.KERNEL_NAME }}
        if: ${{ env.ENABLE_KERNELSU == 'true' }}
        run: |
          # 清理旧文件
          rm -rf ./KernelSU ./drivers/kernelsu
          # 安装KernelSU
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5
          # 添加必要配置
          echo -e "CONFIG_KPROBES=y\nCONFIG_HAVE_KPROBES=y\nCONFIG_KPROBE_EVENTS=y" >> \
            "arch/${{ steps.generate-args.outputs.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}"

      - name: 😋 Setup LXC (if enabled)
        working-directory: ${{ env.KERNEL_NAME }}
        if: ${{ env.ENABLE_LXC == 'true' }}
        run: |
          DEFCONFIG="arch/${{ steps.generate-args.outputs.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}"
          # 添加LXC配置
          while read -r cfg; do echo "$cfg" >> "$DEFCONFIG"; done < "${{ env.WORKSPACE }}/Kernel/LXC/LXC_defconfig"
          # 应用cgroup补丁
          for cgroup_file in "kernel/cgroup.c" "kernel/cgroup/cgroup.c"; do
            [ -f "$cgroup_file" ] || continue
            row=$(sed -n '/^static int cgroup_add_file/=' "$cgroup_file")
            sed -n '/static int cgroup_add_file/,/return 0/p' "$cgroup_file" > /tmp/tmp.txt
            row2=$(sed -n '/return 0/=' /tmp/tmp.txt)
            row3=$((row + row2 - 1))
            sed -i "${row3}i\        }\n        if (cft->ss && (cgrp->root->flags & CGRP_ROOT_NOPREFIX) && !(cft->flags & CFTYPE_NO_PREFIX)) {\n                snprintf(name, CGROUP_FILE_NAME_MAX, \"%%s.%%s\", cft->ss->name, cft->name);\n                kernfs_create_link(cgrp->kn, name, kn);" "$cgroup_file"
          done

      - name: 👍 Start building kernel
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARGS: ${{ steps.generate-args.outputs.ARGS }}
        run: |
          export KBUILD_BUILD_HOST=Github-Action
          export KBUILD_BUILD_USER=$(echo "${{ github.actor }}" | tr A-Z a-z)
          # 生成配置并编译
          make ${{ env.ARGS }} ${{ env.KERNEL_DEFCONFIG_PATH }}
          make ${{ env.ARGS }}

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-artifacts
          path: |
            ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/Image*
            ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/dtb*
            ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/*.img
          if-no-files-found: warn
          retention-days: 7

      - name: 📦 Pack AnyKernel3 (if enabled)
        if: ${{ env.USE_ANYKERNEL3 == 'true' }}
        run: |
          # 克隆AnyKernel3
          if echo "${{ toJSON(matrix.CONFIG.AnyKernel3) }}" | jq -e '.custom' > /dev/null; then
            repo=$(echo "${{ toJSON(matrix.CONFIG.AnyKernel3) }}" | jq -r '.custom.repo')
            branch=$(echo "${{ toJSON(matrix.CONFIG.AnyKernel3) }}" | jq -r '.custom.branch')
            git clone --depth=1 --branch "$branch" "$repo" AnyKernel3
          else
            git clone --depth=1 https://github.com/osm0sis/AnyKernel3 AnyKernel3
            # 通用化配置
            sed -i 's/do.devicecheck=1/do.devicecheck=0/; s/BLOCK=.*/BLOCK=auto;/; s/is_slot_device=0;/is_slot_device=auto;/' AnyKernel3/anykernel.sh
          fi

          # 复制内核镜像
          BOOT_DIR="${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot"
          [ -f "$BOOT_DIR/Image.gz-dtb" ] && cp -f "$_" AnyKernel3/
          [ -f "$BOOT_DIR/Image" ] && cp -f "$_" AnyKernel3/
          [ -f "$BOOT_DIR/dtbo.img" ] && cp -f "$_" AnyKernel3/

          # 打包
          cd AnyKernel3 && zip -r9 "${{ env.WORKSPACE }}/${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-flashable.zip" *

      - name: 🚀 Upload flashable zip
        if: ${{ env.USE_ANYKERNEL3 == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-flashable
          path: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-flashable.zip
          retention-days: 30

      - name: 🎉 Create GitHub Release
        if: ${{ env.USE_ANYKERNEL3 == 'true' && env.CONFIRM_RELEASE == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.KERNEL_DEVICE }}-${{ env.BUILD_DATE }}
          files: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-flashable.zip
          generate_release_notes: true
